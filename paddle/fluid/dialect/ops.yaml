- name: accuracy
  inputs:
  - typename: Tensor
    name: x
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: indices
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: label
    optional: false
    no_need_buffer: false
    data_transform: {}
  attrs: []
  outputs:
  - {typename: Tensor, name: accuracy, optional: false, intermediate: false}
  - {typename: Tensor, name: correct, optional: false, intermediate: false}
  - {typename: Tensor, name: total, optional: false, intermediate: false}
  no_need_buffer: null
  data_transform: null
  infer_meta:
    func: AccuracyInferMeta
    param: [x, indices, label]
  kernel:
    func: [accuracy]
    param: [x, indices, label]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [x]
      to_complex_flag: [false]
    dispatch: {accuracy: null}
    force_backend: null
  inplace: null
  backward: null
- name: adam_
  inputs:
  - typename: Tensor
    name: param
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: grad
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: learning_rate
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: moment1
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: moment2
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: beta1_pow
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: beta2_pow
    optional: false
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: master_param
    optional: true
    no_need_buffer: false
    data_transform: {}
  - typename: Tensor
    name: skip_update
    optional: true
    no_need_buffer: false
    data_transform: {}
  attrs:
  - {typename: Scalar, name: beta1, default_value: 0.9f, data_type: float}
  - {typename: Scalar, name: beta2, default_value: 0.999f, data_type: float}
  - {typename: Scalar, name: epsilon, default_value: 1.0e-8f, data_type: float}
  - {typename: bool, name: lazy_mode, default_value: 'false'}
  - {typename: int64_t, name: min_row_size_to_use_multithread, default_value: '1000'}
  - {typename: bool, name: multi_precision, default_value: 'false'}
  - {typename: bool, name: use_global_beta_pow, default_value: 'false'}
  outputs:
  - {typename: Tensor, name: param_out, optional: false, intermediate: false}
  - {typename: Tensor, name: moment1_out, optional: false, intermediate: false}
  - {typename: Tensor, name: moment2_out, optional: false, intermediate: false}
  - {typename: Tensor, name: beta1_pow_out, optional: false, intermediate: false}
  - {typename: Tensor, name: beta2_pow_out, optional: false, intermediate: false}
  - {typename: Tensor, name: master_param_out, optional: true, intermediate: false}
  no_need_buffer: null
  data_transform: null
  infer_meta:
    func: AdamInferMeta
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lazy_mode, min_row_size_to_use_multithread,
      multi_precision, use_global_beta_pow]
  kernel:
    func: [adam, adam_dense_param_sparse_grad]
    param: [param, grad, learning_rate, moment1, moment2, beta1_pow, beta2_pow, master_param,
      skip_update, beta1, beta2, epsilon, lazy_mode, min_row_size_to_use_multithread,
      multi_precision, use_global_beta_pow]
    backend: null
    layout: null
    data_type:
      ordered: false
      candidates: [param]
      to_complex_flag: [false]
    dispatch:
      adam:
      - [dense, dense, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
      adam_dense_param_sparse_grad:
      - [dense, selected_rows, dense, dense, dense, dense, dense, dense, dense]
      - [dense, dense, dense, dense, dense, dense]
    force_backend: null
  inplace: {param_out): param, moment1_out): (moment1, moment2_out): (moment2, beta1_pow_out): (beta1_pow,
    beta2_pow_out): (beta2_pow, master_param_out: (master_param}
  backward: null
